# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    cour.txt                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: gmary <gmary@student.42.fr>                +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2022/01/07 15:51:37 by gmary             #+#    #+#              #
#    Updated: 2022/01/10 17:01:29 by gmary            ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

-> sigemptyset() function initialises the signal set pointed to by set,
 such that all signals defined in this document are excluded.
->SIGCHLD FIN PGRM FILS
->SIGSEGV VIOLATION DE MEMOIRE (TRANSMIT DU FILS) (SIG SEGFAULT VIOLATION)
->SIGSTOP FIN PGRM
->SIGCONT POUR REPRENDRE PGM
->depuis terminal; kill -sigstop 1234 => tue le processus 1234
->ctr + c => SIGINT(interuption), ctrl + d => SIGHUP(fin de connexion), ctrl + z => SIGSTOP(processus stop)
->en C: int kill(pid_t pid, int sig) => envoie le signal sig au processus correspondant au pid
->raise(int sig); => renvoie le signal au processus courant
->unsigned int alarm(unsigned int nb_sec) envoie le signal SIGALRM(interupton horloge) au bout de nb_sec)
 renvoie le nb de sec depuis le dernier appel sinon 0
->int pause(void); => pause le pgrm
->wait en fin de processus
->void (*signal(int signum, void (*handler)(int)))(int) => signum = numero du signal, 
handler(int signum) cette fonction est apl lors de la reception dun signal sinon on dautres signaux comme
 SIG_DFL (SIG DEFAULT) ou SIG_IGN (SIG IGNORE)

-> function majeur:
int sigemptyset(sigset t *set) :
=⇒ vide l’ensemble (tous les signaux sont deselectionnes) ;
int sigfillset (sigset t *set) :
=⇒ remplit l’ensemble (tous les signaux sont selectionnes) ;
int sigaddset(sigset t *set, int signum) :
=⇒ ajoute le signal “signum” `a l’ensemble “set” ;
int sigdelset(sigset t *set, int signum) :
=⇒ supprime le signal “signum” de l’ensemble “set” ;
int sigismember(const sigset t *set, int signum) :
=⇒ indique si le signal “signum” appartient `a l’ensemble “set” (1 si
oui, 0 sinon).
=>elle renvoie tte 0 si ok et -1 si pb survenu

int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact)
=>modifie les actions sur signum
=>la struct sigaction:
struct sigaction{
void (∗sa_handler) (int) ;
void(∗sa_sigaction) (int, siginfo_t∗, void∗) ;
sigset_t sa_mask;
int sa_flags;
}
sa_mask masque les signaux a bloquer pdt l'execution!!
sa_flags ensemble d'attributs modifiant le comportement deu gestionnaire

=>si sa_flags contient SA_SIGINFO alors le gestionaire est:
void (* sa_sigaction) (int, siginfo_t *, void *)
siginfo_t contient: si_signo =numero du processus, si_errno =numero derreur, si_pid =numero du pid
=>si on a pas de SA_SIGINFO le gestionairee est donc: void (* sa handler)(int)



